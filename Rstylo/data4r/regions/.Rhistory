setwd("~/methal/methalV1/Rstylo/data4r/regions")
library(stylo)
library(rlist)
# = = = = = = = = = = = = = =
#       load corpus         =
# = = = = = = = = = = = = = =
primary.raw.corpus.bas <- load.corpus(files = "all", corpus.dir = "bas_underscore", encoding = "UTF-8")
secondary.raw.corpus.haut <- load.corpus(files = "all", corpus.dir = "haut_underscore", encoding = "UTF-8")
# = = = = = = = = = = = = = =
#         tokenizer         =
# = = = = = = = = = = = = = =
primary.tokenized.corpus.bas <- txt.to.words(primary.raw.corpus.bas, splitting.rule="[[:space:]]+", preserve.case = FALSE)
secondary.tokenized.corpus.haut <- txt.to.words(secondary.raw.corpus.haut, splitting.rule="[[:space:]]+", preserve.case = FALSE)
rm(primary.raw.corpus.bas, secondary.raw.corpus.haut)
## 2-grams(characters)
primary.2gram.corpus = txt.to.features(primary.tokenized.corpus.bas, features = "c", ngram.size = 2)
## 5-grams(characters)
primary.5gram.corpus = txt.to.features(primary.tokenized.corpus.bas, features = "c", ngram.size = 5)
secondary.5gram.corpus = txt.to.features(secondary.tokenized.corpus.haut, features = "c", ngram.size = 5)
rm(primary.tokenized.corpus.bas, secondary.tokenized.corpus.haut)
# = = = = = = = = = = = = = =
#       filtering ngrams    =
# = = = = = = = = = = = = = =
regexpattern = "^(?!.*[ ](?=[ ]))\\S.*?\\S$"
## 5-grams(characters)
primary.5gram.corpus = list.search(primary.5gram.corpus, .[grepl(regexpattern, ., perl = TRUE)])
secondary.5gram.corpus = list.search(secondary.5gram.corpus, .[grepl(regexpattern, ., perl = TRUE)])
freqlist = make.frequency.list(primary.5gram.corpus,value=TRUE)
View(freqlist)
freqlist = make.frequency.list(primary.5gram.corpus,value=TRUE,relative = FALSE)
View(freqlist)
typeof(freqlist)
freqlist
write.csv(freqlist,"freqlist_5gram")
write.csv(freqlist,"freqlist_5gram",col.names = FALSE)
write.csv(freqlist,"freqlist_5gram",na = "")
write.table(freqlist,"freqlist_5gram.csv",col.names = FALSE)
write.table(freqlist,"freqlist_5gram.csv",row.names = FALSE)
write.csv(freqlist,"freqlist_5gram.csv",row.names = FALSE)
freq.5gram = make.frequency.list(primary.5gram.corpus,value=TRUE,relative = FALSE)
rm(freqlist)
rm(primary.2gram.corpus)
rm(freq.5gram)
## 4-grams(characters)
primary.4gram.corpus = list.search(primary.4gram.corpus, .[grepl(regexpattern, ., perl = TRUE)])
secondary.4gram.corpus = list.search(secondary.4gram.corpus, .[grepl(regexpattern, ., perl = TRUE)])
# = = = = = = = = = = = = = =
#       load corpus         =
# = = = = = = = = = = = = = =
primary.raw.corpus.bas <- load.corpus(files = "all", corpus.dir = "bas_underscore", encoding = "UTF-8")
secondary.raw.corpus.haut <- load.corpus(files = "all", corpus.dir = "haut_underscore", encoding = "UTF-8")
# = = = = = = = = = = = = = =
#         tokenizer         =
# = = = = = = = = = = = = = =
primary.tokenized.corpus.bas <- txt.to.words(primary.raw.corpus.bas, splitting.rule="[[:space:]]+", preserve.case = FALSE)
secondary.tokenized.corpus.haut <- txt.to.words(secondary.raw.corpus.haut, splitting.rule="[[:space:]]+", preserve.case = FALSE)
## 4-grams(characters)
primary.4gram.corpus = txt.to.features(primary.tokenized.corpus.bas, features = "c", ngram.size = 4)
secondary.4gram.corpus = txt.to.features(secondary.tokenized.corpus.haut, features = "c", ngram.size = 4)
rm(primary.raw.corpus.bas, secondary.raw.corpus.haut)
rm(primary.tokenized.corpus.bas, secondary.tokenized.corpus.haut)
## 4-grams(characters)
primary.4gram.corpus = list.search(primary.4gram.corpus, .[grepl(regexpattern, ., perl = TRUE)])
secondary.4gram.corpus = list.search(secondary.4gram.corpus, .[grepl(regexpattern, ., perl = TRUE)])
## 5-grams(characters)
primary.5gram.corpus = list.search(primary.5gram.corpus, .[grepl(regexpattern, ., perl = TRUE)])
secondary.5gram.corpus = list.search(secondary.5gram.corpus, .[grepl(regexpattern, ., perl = TRUE)])
freq.bas.5gram = make.frequency.list(primary.5gram.corpus,value=TRUE,relative = FALSE)
freq.haut.5gram = make.frequency.list(secondary.5gram.corpus,value=TRUE,relative = FALSE)
freq.bas.4gram = make.frequency.list(primary.4gram.corpus,value=TRUE,relative = FALSE)
freq.haut.4gram = make.frequency.list(secondary.4gram.corpus,value=TRUE,relative = FALSE)
write.csv(freq.bas.5gram,"freq_bas_5gram.csv",row.names = FALSE)
write.csv(freq.haut.5gram,"freq_haut_5gram.csv",row.names = FALSE)
write.csv(freq.bas.4gram,"freq_bas_4gram.csv",row.names = FALSE)
write.csv(freq.haut.4gram,"freq_haut_4gram.csv",row.names = FALSE)
