setwd("~/methal/methalV1/Rstylo/data4r")
library(stylo)
setwd("~/methal/methalV1/Rstylo/data4r")
library(stylo)
# load corpus
primary.raw.corpus.bas <- load.corpus(files = "all", corpus.dir = "bas-rhin", encoding = "UTF-8")
secondary.raw.corpus.haut <- load.corpus(files = "all", corpus.dir = "haut-rhin", encoding = "UTF-8")
# tokenizer
primary.tokenized.corpus.bas <- txt.to.words(primary.raw.corpus.bas, splitting.rule="[[:space:]]+", preserve.case = TRUE)
secondary.tokenized.corpus.haut <- txt.to.words(secondary.raw.corpus.haut, splitting.rule="[[:space:]]+", preserve.case = TRUE)
# contrastive analysis
bas.corpus = oppose(primary.corpus = primary.tokenized.corpus.bas, secondary.corpus = secondary.tokenized.corpus.haut)
# load corpus
primary.raw.corpus.bas <- load.corpus(files = "all", corpus.dir = "merge_bas-rhin.txt", encoding = "UTF-8")
# load corpus
primary.raw.corpus.bas <- load.corpus(files = "all", corpus.dir = "merge_bas", encoding = "UTF-8")
secondary.raw.corpus.haut <- load.corpus(files = "all", corpus.dir = "merge_haut", encoding = "UTF-8")
# tokenizer
primary.tokenized.corpus.bas <- txt.to.words(primary.raw.corpus.bas, splitting.rule="[[:space:]]+", preserve.case = TRUE)
secondary.tokenized.corpus.haut <- txt.to.words(secondary.raw.corpus.haut, splitting.rule="[[:space:]]+", preserve.case = TRUE)
# contrastive analysis
bas.corpus = oppose(primary.corpus = primary.tokenized.corpus.bas, secondary.corpus = secondary.tokenized.corpus.haut)
